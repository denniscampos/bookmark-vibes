

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."bookmark" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "title" "text",
    "url" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "user_id" "uuid" NOT NULL,
    "category_id" "uuid",
    "category_name" "text"
);


ALTER TABLE "public"."bookmark" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."bookmark_category" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid",
    "category_id" "uuid",
    "bookmark_id" "uuid"
);


ALTER TABLE "public"."bookmark_category" OWNER TO "postgres";


COMMENT ON TABLE "public"."bookmark_category" IS 'many to many';



ALTER TABLE "public"."bookmark_category" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."bookmark_category_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."category" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "bookmark_id" "uuid",
    "user_id" "uuid"
);


ALTER TABLE "public"."category" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."profile" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" DEFAULT "gen_random_uuid"(),
    "name" "text",
    "avatar_url" "text",
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."profile" OWNER TO "postgres";


ALTER TABLE ONLY "public"."bookmark_category"
    ADD CONSTRAINT "bookmark_category_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."bookmark"
    ADD CONSTRAINT "bookmark_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."category"
    ADD CONSTRAINT "category_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."bookmark_category"
    ADD CONSTRAINT "bookmark_category_bookmark_id_fkey" FOREIGN KEY ("bookmark_id") REFERENCES "public"."bookmark"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."bookmark_category"
    ADD CONSTRAINT "bookmark_category_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "public"."category"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."bookmark"
    ADD CONSTRAINT "bookmark_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "public"."category"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."bookmark_category"
    ADD CONSTRAINT "bookmark_category_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."bookmark"
    ADD CONSTRAINT "bookmark_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."category"
    ADD CONSTRAINT "category_bookmark_id_fkey" FOREIGN KEY ("bookmark_id") REFERENCES "public"."bookmark"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."category"
    ADD CONSTRAINT "category_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "public_profile_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



CREATE POLICY "CREATE BOOKMARK" ON "public"."bookmark" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "CREATE CATEGORY" ON "public"."category" FOR INSERT TO "authenticated", "anon" WITH CHECK (true);



CREATE POLICY "DELETE CATEGORY" ON "public"."category" FOR DELETE TO "authenticated" USING (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."profile" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."bookmark" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."profile" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Enable update for users" ON "public"."profile" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "ErrrThing'!" ON "public"."bookmark_category" TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "READ CATEGORY" ON "public"."category" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "REMOVE BOOKMARK" ON "public"."bookmark" FOR DELETE TO "authenticated" USING (true);



CREATE POLICY "UPDATE BOOKMARK" ON "public"."bookmark" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "UPDATE CATEGORY" ON "public"."category" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);



ALTER TABLE "public"."bookmark" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."bookmark_category" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."category" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profile" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";


















































































































































































































GRANT ALL ON TABLE "public"."bookmark" TO "anon";
GRANT ALL ON TABLE "public"."bookmark" TO "authenticated";
GRANT ALL ON TABLE "public"."bookmark" TO "service_role";



GRANT ALL ON TABLE "public"."bookmark_category" TO "anon";
GRANT ALL ON TABLE "public"."bookmark_category" TO "authenticated";
GRANT ALL ON TABLE "public"."bookmark_category" TO "service_role";



GRANT ALL ON SEQUENCE "public"."bookmark_category_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."bookmark_category_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."bookmark_category_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."category" TO "anon";
GRANT ALL ON TABLE "public"."category" TO "authenticated";
GRANT ALL ON TABLE "public"."category" TO "service_role";



GRANT ALL ON TABLE "public"."profile" TO "anon";
GRANT ALL ON TABLE "public"."profile" TO "authenticated";
GRANT ALL ON TABLE "public"."profile" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
